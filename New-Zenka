local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()


--Window--

local window = DrRayLibrary:Load("Zenka Auto Chest Farm", "Default")

--Tabs--

local tab = DrRayLibrary.newTab("Main", "ImageIdHere")


--Toggles--


tab.newToggle("TP to chest", "this may Kick You out!", true, function(toggleState)
    function thisCode()
    repeat task.wait() until game:IsLoaded()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
    end)
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(4)
                end
            end
        end
    end
    
    function Teleport()
        while wait() do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end
    local veryImportantWaitTime = 0.5
    task.spawn(function()
        while task.wait(veryImportantWaitTime) do
            pcall(function()
                for i,v in pairs(game.CoreGui:GetDescendants()) do
                    pcall(function()
                        if string.find(v.Name,"ErrorMessage") then
                            if string.find(v.Text,"Security kick") then
                                veryImportantWaitTime = 1e9
                                Teleport()
                            end
                        end
                    end)
                end
            end)
        end
    end)

    local AllowRunService = true
    local AllowRunServiceBind = Instance.new("BindableFunction")
    function AllowRunServiceBind.OnInvoke(args)
        if args == "Enable" then
            AllowRunService = true
        elseif args == "Disable" then
            AllowRunService = false
        end
        local CoreGui = game:GetService("StarterGui")
        CoreGui:SetCore("SendNotification", {
            Title = "Auto Chest",
            Text = "Subscribe To NeoWare",
            Duration = math.huge,
            Callback = AllowRunServiceBind,
        })
    end

    local CoreGui = game:GetService("StarterGui")
    CoreGui:SetCore("SendNotification", {
        Title = "Auto Chest",
        Text = "กดซับด้วย",
        Duration = math.huge,
        Callback = AllowRunServiceBind,
    })
    
    task.spawn(function()
        while true do
            if AllowRunService == true then
                local hasChar = game.Players.LocalPlayer:FindFirstChild("Character")
                if not game.Players.LocalPlayer.Character then
        
                else
                    local hasCrewTag = game.Players.LocalPlayer.Character:FindFirstChild("CrewBBG",true)
                    if hasCrewTag then hasCrewTag:Destroy() end
                    local hasHumanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
                    if hasHumanoid then
                        local Chest = game.Workspace:FindFirstChild("Chest4") or game.Workspace:FindFirstChild("Chest3") or game.Workspace:FindFirstChild("Chest2") or game.Workspace:FindFirstChild("Chest1") or game.Workspace:FindFirstChild("Chest")
                        
                        if Chest then
                            game.Players.LocalPlayer.Character:PivotTo(Chest:GetPivot())
                            firesignal(Chest.Touched,game.Players.LocalPlayer.Character.HumanoidRootPart)
                        else
                            Teleport()
                            break
                        end
                    end 
                end
            end
            task.wait()
        end
    end)

end

thisCode()

join = game.Players.localPlayer.Neutral == false
if _G.Team == nil then
    _G.Team = "Pirates"
end
_G.Team = "Marines"
if (_G.Team == "Pirates" or _G.Team == "Marines") and not join then
    repeat wait()
        pcall(function()
            join = game.Players.localPlayer.Neutral == false
            if _G.Team == "Pirates" then
                for i,v in pairs({"MouseButton1Click", "MouseButton1Down", "Activated"}) do
                    for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton[v])) do
                        v.Function()
                    end
                end
            elseif _G.Team == "Marines" then
                for i,v in pairs({"MouseButton1Click", "MouseButton1Down", "Activated"}) do
                    for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton[v])) do
                        v.Function()
                    end
                end
            else
                for i,v in pairs({"MouseButton1Click", "MouseButton1Down", "Activated"}) do
                    for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton[v])) do
                        v.Function()
                    end
                end
            end
        end)
    until join == true
    game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Visible = false
    end
    if toggleState then
        print("On")
    else
        print("Off")
    end
end)






tab.newToggle("Auto Farm Tween", "Tweens to chests", true, function(toggleState)
    -- Set the workspace gravity to 0
game.Workspace.Gravity = 0

-- TP4 function for tweening the movement
function TP4(targetCFrame)
    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character.HumanoidRootPart
    local distance = (targetCFrame.Position - humanoidRootPart.Position).Magnitude
    local speed

    if distance < 250 then
        speed = 200
    elseif distance < 1000 then
        speed = 350
    else
        speed = 210
    end

    local tween = game:GetService("TweenService"):Create(
        humanoidRootPart,
        TweenInfo.new(distance / speed, Enum.EasingStyle.Linear),
        {CFrame = targetCFrame}
    )
    tween:Play()
    tween.Completed:Wait()  -- Ensure the tween completes before proceeding
end

-- Function to teleport the player above the target and then move down
local function TeleportAboveAndDescend(targetCFrame)
    local aboveTargetPosition = targetCFrame.Position + Vector3.new(0, 75, 0) -- 100 studs above the target
    local aboveTargetCFrame = CFrame.new(aboveTargetPosition)

    -- Tween to the position directly above the target
    TP4(aboveTargetCFrame)

    -- Tween down to the target
    TP4(targetCFrame)
end

-- Function to find the closest chest
local function GetClosestChest()
    local targetDistance = 20000
    local target = nil
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

    for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
        if v.Name == "Chest1" or v.Name == "Chest2" or v.Name == "Chest3" then
            local distance = (playerPosition - v.Position).Magnitude
            if distance < targetDistance then
                targetDistance = distance
                target = v
            end
        end
    end
    return target
end

-- Coroutine to continuously teleport to the closest chest
spawn(function()
    while true do
        local success, error = pcall(function()
            local closestChest = GetClosestChest()
            if closestChest then
                TeleportAboveAndDescend(closestChest.CFrame)
            end
        end)
        task.wait()
        if not success then
            warn(error)
        end
    end
end)

-- Coroutine to continuously disable collision for player parts
spawn(function()
    while true do
        pcall(function()
            for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
        task.wait()
    end
end)
    if toggleState then
        print("On")
    else
        print("Off")
    end
end)
